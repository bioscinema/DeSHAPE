### DeSHAPE 3: Asymmetry Test
deshape_perm_pair(Shannon ~ group_prefix,
data        = plot_df,
mode        = "skewness",     # or "dispersion", "skewness"
alternative = "greater",
perm        = 10000,
seed = 2025)
### DeSHAPE 1: Median Diff via Quantile Reg
qr_fit <- rq(Shannon ~ group_prefix,
data = plot_df,
tau = 0.5,
method = "fn")
set.seed(2025)
summary(qr_fit, se = "boot")
# adjust sequencing depth
qr_fit_d <- rq(Shannon ~ group_prefix + Depth,
data = plot_df,
tau = 0.5,
method = "fn")
set.seed(2025)
summary(qr_fit_d, se = "boot")
# adjust sequencing depth and other confounders
qr_fit_d_c <- rq(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
tau = 0.5,
method = "fn")
set.seed(2025)
summary(qr_fit_d_c, se = "boot")
### DeSHAPE 2: Dispersion Diff via Quantile Reg
deshape_wald_contrast(Shannon ~ group_prefix,
data = plot_df,
taus = c(0.25,0.75),
contrast = c(0,-1,0,1),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth
deshape_wald_contrast(Shannon ~ group_prefix + Depth,
data = plot_df,
taus = c(0.25,0.75),
contrast = c(0,-1,0,0,1,0),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth and other confounders
deshape_wald_contrast(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
taus = c(0.25,0.75),
contrast = c(0,-1,0,0,0,1,0,0),
alternative = "greater",
kernel = "gaussian")
### DeSHAPE 3: Asymmetry Diff via Quantile Reg
deshape_wald_contrast(Shannon ~ group_prefix,
data = plot_df,
taus = c(0.1,0.5,0.9),
contrast = c(0,1,0,-2,0,1),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth
deshape_wald_contrast(Shannon ~ group_prefix + Depth,
data = plot_df,
taus = c(0.1,0.5,0.9),
contrast = c(0,1,0,0,-2,0,0,1,0),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth and other confounders
deshape_wald_contrast(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
taus = c(0.1,0.5,0.9),
contrast = c(0,1,0,0,0,-2,0,0,0,1,0,0),
alternative = "greater",
kernel = "gaussian")
deshape_glm_resid_test(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
mode = "center",
family = Gamma(link = "log"),
group = "Status",  # grouping variable name
alternative = "greater",
q = 0.25, B = 999, seed = 2025)$p.value
load("../Real_Data/tumor_rooted.RData")
phy_16S <- physeq.tree
sample_data(physeq.tree)$group_prefix <- substr(sample_data(physeq.tree)$group, 1, 3)
phy_16S <- subset_samples(physeq.tree, group_prefix != "C")
phy_16S <- prune_taxa(taxa_sums(phy_16S) > 0, phy_16S)
sample_data(phy_16S)$group_prefix <- factor(sample_data(phy_16S)$group_prefix)
sample_data(phy_16S)$Cohort <- factor(sample_data(phy_16S)$Cohort)
otu_mat <- as(otu_table(phy_16S ), "matrix")
if (taxa_are_rows(phy_16S )) {
otu_mat <- t(otu_mat)
}
depth <- rowSums(otu_mat)
shannon_vec <- diversity(otu_mat, index = "shannon")
shannon_df <- data.frame(SampleID = rownames(otu_mat),
Shannon = shannon_vec)
meta_df <- as(sample_data(phy_16S),"data.frame")
meta_df$SampleID <- rownames(meta_df)
plot_df <- merge(shannon_df, meta_df, by = "SampleID")
plot_df$Depth <- depth
p <- ggplot(plot_df, aes(x = group_prefix, y = Shannon, fill = group_prefix)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.15, outlier.shape = NA) +
stat_compare_means(
method = "wilcox.test",
label.y = max(plot_df$Shannon) * 1.05,
size = 6,
fontface = "bold"
) +
theme_minimal(base_size = 14) +
labs(x = NULL, y = "Shannon Index") +
scale_fill_manual(values = c("LTS" = "#E69F00", "STS" = "#56B4E9")) +
theme(
legend.position = "none",
axis.title.y = element_text(face = "bold", size = 18),
axis.text = element_text(face = "bold", size = 14),
axis.title.x = element_blank(),
plot.title = element_blank()
)
ggsave("tumer_shannon_violin.eps", plot = p, device = cairo_ps, width = 6, height = 5)
p
### Permutation-based test
### DeSHAPE 1: Median Diff Test
deshape_perm_pair(Shannon ~ group_prefix,
data        = plot_df,
mode        = "center",     # or "dispersion", "skewness
alternative = "greater",
perm        = 10000,
seed = 2025)
### DeSHAPE 2: Dispersion Diff Test
deshape_perm_pair(Shannon ~ group_prefix,
data        = plot_df,
mode        = "dispersion",     # or "dispersion", "skewness"
alternative = "greater",
perm        = 10000,
seed = 2025)
### DeSHAPE 3: Asymmetry Test
deshape_perm_pair(Shannon ~ group_prefix,
data        = plot_df,
mode        = "skewness",     # or "dispersion", "skewness"
alternative = "greater",
perm        = 10000,
seed = 2025)
### DeSHAPE 1: Median Diff via Quantile Reg
qr_fit <- rq(Shannon ~ group_prefix,
data = plot_df,
tau = 0.5,
method = "fn")
set.seed(2025)
summary(qr_fit, se = "boot")
# adjust sequencing depth
qr_fit_d <- rq(Shannon ~ group_prefix + Depth,
data = plot_df,
tau = 0.5,
method = "fn")
set.seed(2025)
summary(qr_fit_d, se = "boot")
# adjust sequencing depth and other confounders
qr_fit_d_c <- rq(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
tau = 0.5,
method = "fn")
set.seed(2025)
summary(qr_fit_d_c, se = "boot")
### DeSHAPE 2: Dispersion Diff via Quantile Reg
deshape_wald_contrast(Shannon ~ group_prefix,
data = plot_df,
taus = c(0.25,0.75),
contrast = c(0,-1,0,1),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth
deshape_wald_contrast(Shannon ~ group_prefix + Depth,
data = plot_df,
taus = c(0.25,0.75),
contrast = c(0,-1,0,0,1,0),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth and other confounders
deshape_wald_contrast(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
taus = c(0.25,0.75),
contrast = c(0,-1,0,0,0,1,0,0),
alternative = "greater",
kernel = "gaussian")
### DeSHAPE 3: Asymmetry Diff via Quantile Reg
deshape_wald_contrast(Shannon ~ group_prefix,
data = plot_df,
taus = c(0.1,0.5,0.9),
contrast = c(0,1,0,-2,0,1),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth
deshape_wald_contrast(Shannon ~ group_prefix + Depth,
data = plot_df,
taus = c(0.1,0.5,0.9),
contrast = c(0,1,0,0,-2,0,0,1,0),
alternative = "greater",
kernel = "gaussian")
# adjust sequencing depth and other confounders
deshape_wald_contrast(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
taus = c(0.1,0.5,0.9),
contrast = c(0,1,0,0,0,-2,0,0,0,1,0,0),
alternative = "greater",
kernel = "gaussian")
deshape_glm_resid_test(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
mode = "center",
family = Gamma(link = "log"),
group = "Status",  # grouping variable name
alternative = "greater",
q = 0.25, B = 999, seed = 2025)$p.value
plot_df
deshape_glm_resid_test(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
mode = "center",
family = Gamma(link = "log"),
group = "group_prefix",  # grouping variable name
alternative = "greater",
q = 0.25, B = 999, seed = 2025)$p.value
deshape_glm_resid_test(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
mode = "dispersion",
family = Gamma(link = "log"),
group = "group_prefix",  # grouping variable name
alternative = "greater",
q = 0.25, B = 999, seed = 2025)$p.value
deshape_glm_resid_test(Shannon ~ group_prefix + Cohort + Depth,
data = plot_df,
mode = "skewness",
family = Gamma(link = "log"),
group = "group_prefix",  # grouping variable name
alternative = "greater",
q = 0.25, B = 999, seed = 2025)$p.value
setwd("~/Desktop/DADE")
library(devtools)
devtools::document()
devtools::clean_dll()
devtools::document()
devtools::clean_dll()
devtools::document()
devtools::install()
setwd("~/Desktop/DADE/Analysis")
library(phyloseq)
library(vegan)
library(ggplot2)
library(ggpubr)
library(car)
library(quantreg)
library(dplyr)
library(hillR)
library(devtools)
#devtools::install_github("bioscinema/DeSHAPE")
library(DeSHAPE)
load("../Real_Data/cardiovascular_wgs.RData")
meta <- as(sample_data(ps),"data.frame")
meta$SampleID <- rownames(meta)
meta <- meta %>%
filter(grepl("^MMC", Status) | grepl("^HC", Status) | grepl("^IHD", Status)) %>%
mutate(Status = ifelse(grepl("^MMC", Status), "MMC",
ifelse(grepl("^HC", Status), "HC",
ifelse(grepl("^IHD", Status), "IHD", NA))))
meta <- meta %>%
mutate(HbA1c = ifelse(HbA1c.... == "NA", NA, HbA1c....)) %>%
filter(!is.na(HbA1c)) %>%
mutate(HbA1c = as.numeric(HbA1c....))
meta <- meta %>%
filter(Gender %in% c("Female", "Male"))
ps_filt <- prune_samples(meta$SampleID, ps)
sample_data(ps_filt) <- sample_data(meta)
ps_filt <- prune_taxa(taxa_sums(ps_filt) > 0, ps_filt)
otu_mat <- as(otu_table(ps_filt), "matrix")
if (taxa_are_rows(ps_filt)) {
otu_mat <- t(otu_mat)
}
depth <- rowSums(otu_mat)
shannon_vec <- diversity(otu_mat, index = "shannon")
shannon_df <- data.frame(SampleID = rownames(otu_mat),
Shannon = shannon_vec)
meta_df <- as(sample_data(ps_filt),"data.frame")
meta_df$SampleID <- rownames(meta_df)
plot_df <- merge(shannon_df, meta_df, by = "SampleID")
plot_df$Depth <- depth
p <- ggplot(plot_df, aes(x = Status, y = Shannon, fill = Status)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.15, outlier.shape = NA) +
stat_compare_means(method = "kruskal.test",
label.y  = max(plot_df$Shannon) * 1.05,
size     = 6,
fontface = "bold") +
scale_fill_manual(values = c("HC"  = "#56B4E9",
"MMC" = "#E69F00",
"IHD" = "lightgreen")) +
theme_minimal(base_size = 14) +
labs(x = NULL, y = "Shannon Index") +
theme(legend.position = "none",
axis.title.y    = element_text(face = "bold", size = 18),
axis.text       = element_text(face = "bold", size = 14),
plot.title      = element_blank())
ggsave("card_shannon_violin.eps", plot = p, device = cairo_ps, width = 6, height = 5)
p
### Permutation-based test
### DeSHAPE 1: Median Diff Test
deshape_perm_multi(Shannon ~ Status,
data        = plot_df,
mode        = "center",     # or "dispersion", "skewness"
perm        = 10000,
seed = 2025)
devtools::install_github("bioscinema/DeSHAPE")
library(phyloseq)
library(vegan)
library(ggplot2)
library(ggpubr)
library(car)
library(quantreg)
library(dplyr)
library(hillR)
library(devtools)
#devtools::install_github("bioscinema/DeSHAPE")
library(DeSHAPE)
load("../Real_Data/cardiovascular_wgs.RData")
meta <- as(sample_data(ps),"data.frame")
meta$SampleID <- rownames(meta)
meta <- meta %>%
filter(grepl("^MMC", Status) | grepl("^HC", Status) | grepl("^IHD", Status)) %>%
mutate(Status = ifelse(grepl("^MMC", Status), "MMC",
ifelse(grepl("^HC", Status), "HC",
ifelse(grepl("^IHD", Status), "IHD", NA))))
meta <- meta %>%
mutate(HbA1c = ifelse(HbA1c.... == "NA", NA, HbA1c....)) %>%
filter(!is.na(HbA1c)) %>%
mutate(HbA1c = as.numeric(HbA1c....))
meta <- meta %>%
filter(Gender %in% c("Female", "Male"))
ps_filt <- prune_samples(meta$SampleID, ps)
sample_data(ps_filt) <- sample_data(meta)
ps_filt <- prune_taxa(taxa_sums(ps_filt) > 0, ps_filt)
otu_mat <- as(otu_table(ps_filt), "matrix")
if (taxa_are_rows(ps_filt)) {
otu_mat <- t(otu_mat)
}
depth <- rowSums(otu_mat)
shannon_vec <- diversity(otu_mat, index = "shannon")
shannon_df <- data.frame(SampleID = rownames(otu_mat),
Shannon = shannon_vec)
meta_df <- as(sample_data(ps_filt),"data.frame")
meta_df$SampleID <- rownames(meta_df)
plot_df <- merge(shannon_df, meta_df, by = "SampleID")
plot_df$Depth <- depth
p <- ggplot(plot_df, aes(x = Status, y = Shannon, fill = Status)) +
geom_violin(trim = FALSE) +
geom_boxplot(width = 0.15, outlier.shape = NA) +
stat_compare_means(method = "kruskal.test",
label.y  = max(plot_df$Shannon) * 1.05,
size     = 6,
fontface = "bold") +
scale_fill_manual(values = c("HC"  = "#56B4E9",
"MMC" = "#E69F00",
"IHD" = "lightgreen")) +
theme_minimal(base_size = 14) +
labs(x = NULL, y = "Shannon Index") +
theme(legend.position = "none",
axis.title.y    = element_text(face = "bold", size = 18),
axis.text       = element_text(face = "bold", size = 14),
plot.title      = element_blank())
ggsave("card_shannon_violin.eps", plot = p, device = cairo_ps, width = 6, height = 5)
p
### Permutation-based test
### DeSHAPE 1: Median Diff Test
deshape_perm_multi(Shannon ~ Status,
data        = plot_df,
mode        = "center",     # or "dispersion", "skewness"
perm        = 10000,
seed = 2025)
setwd("~/Desktop/DADE")
devtools::check()
devtools::document()
devtools::document()
deshape_perm_multi <- function(formula, data, mode = c("center", "dispersion", "skewness"), perm = 999, seed) {
mode <- match.arg(mode)
vars <- all.vars(formula)
response <- vars[1]
predictor <- vars[2]
predictor_vals <- factor(data[[predictor]])
if (nlevels(predictor_vals) <= 2) {
stop(paste("The variable", predictor, "should have more than two groups!"))
}
if (mode == "center") {
result <- perm_median_anova(data, outcome = response, group = predictor, B = perm, seed = seed)
cat("Permutation p-value:", result$p.value, "\n")
} else if (mode == "dispersion") {
result <- perm_dispersion_anova(data, outcome = response, group = predictor, B = perm, seed = seed)
cat("Permutation p-value:", result$p.value, "\n")
} else if (mode == "skewness") {
result <- perm_asymmetry_anova(data, outcome = response, group = predictor, B = perm, seed = seed)
cat("Permutation p-value:", result$p.value, "\n")
}
}
# Internal helper: not exported
perm_median_anova <- function(data, outcome, group, B = 1000, seed = NULL) {
if (!is.null(seed)) set.seed(seed)
x <- data[[outcome]]
g <- data[[group]]
if (!is.numeric(x)) stop("Outcome must be numeric.")
if (!is.factor(g)) g <- factor(g)
K <- nlevels(g)
G_list <- split(x, g)
group_medians <- sapply(G_list, median)
grand_median <- median(x)
T_obs <- mean((group_medians - grand_median)^2)
T_perm <- numeric(B)
n <- length(x)
for (b in seq_len(B)) {
g_perm <- sample(g)  # permute labels
G_star <- split(x, g_perm)
group_star_medians <- sapply(G_star, median)
T_perm[b] <- mean((group_star_medians - grand_median)^2)
}
p_val <- mean(T_perm >= T_obs)
return(list(
statistic = T_obs,
p.value = p_val,
T_perm = T_perm,
method = "Permutation-based median ANOVA",
B = B
))
}
# Internal helper: not exported
perm_dispersion_anova <- function(data, outcome, group, q = 0.25, B = 1000, seed = NULL) {
if (!is.null(seed)) set.seed(seed)
x <- data[[outcome]]
g <- data[[group]]
if (!is.numeric(x)) stop("Outcome must be numeric.")
if (!is.factor(g)) g <- factor(g)
# Define dispersion (IQR) function
dispersion <- function(v) {
quantile(v, 1 - q, names = FALSE, type = 7) - quantile(v, q, names = FALSE, type = 7)
}
K <- nlevels(g)
G_list <- split(x, g)
group_disp <- sapply(G_list, dispersion)
grand_disp <- dispersion(x)
T_obs <- mean((group_disp - grand_disp)^2)
# Permutation step
T_perm <- numeric(B)
for (b in seq_len(B)) {
g_perm <- sample(g)
G_star <- split(x, g_perm)
group_star_disp <- sapply(G_star, dispersion)
T_perm[b] <- mean((group_star_disp - grand_disp)^2)
}
p_val <- mean(T_perm >= T_obs)
return(list(
statistic = T_obs,
p.value = p_val,
T_perm = T_perm,
method = "Permutation-based Dispersion ANOVA",
B = B
))
}
# Internal helper: not exported
perm_asymmetry_anova <- function(data, outcome, group, q = 0.1, B = 1000, seed = NULL) {
if (!is.null(seed)) set.seed(seed)
x <- data[[outcome]]
g <- data[[group]]
if (!is.numeric(x)) stop("Outcome must be numeric.")
if (!is.factor(g)) g <- factor(g)
# Define asymmetry score function
asymmetry <- function(v) {
q_upper <- quantile(v, 1 - q, names = FALSE, type = 7)
q_median <- quantile(v, 0.5, names = FALSE, type = 7)
q_lower <- quantile(v, q, names = FALSE, type = 7)
return(q_upper - 2 * q_median + q_lower)
}
K <- nlevels(g)
G_list <- split(x, g)
group_asym <- sapply(G_list, asymmetry)
grand_asym <- asymmetry(x)
T_obs <- mean((group_asym - grand_asym)^2)
# Permutation
T_perm <- numeric(B)
for (b in seq_len(B)) {
g_perm <- sample(g)
G_star <- split(x, g_perm)
group_star_asym <- sapply(G_star, asymmetry)
T_perm[b] <- mean((group_star_asym - grand_asym)^2)
}
p_val <- mean(T_perm >= T_obs)
return(list(
statistic = T_obs,
p.value = p_val,
T_perm = T_perm,
method = "Permutation-based Asymmetry ANOVA",
B = B
))
}
### Permutation-based test
### DeSHAPE 1: Median Diff Test
deshape_perm_multi(Shannon ~ Status,
data        = plot_df,
mode        = "center",     # or "dispersion", "skewness"
perm        = 10000,
seed = 2025)
### DeSHAPE 2: Dispersion Diff Test
deshape_perm_multi(Shannon ~ Status,
data        = plot_df,
mode        = "dispersion",     # or "dispersion", "skewness"
perm        = 10000,
seed = 2025)
### DeSHAPE 3: Asymmetry Test
deshape_perm_multi(Shannon ~ Status,
data        = plot_df,
mode        = "skewness",     # or "dispersion", "skewness"
perm        = 10000,
seed = 2025)
